name: Auto Merge
on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: integer

jobs:
  automerge:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set PR Number
        id: set_pr_number
        run: |
          echo "PR_NUMBER=${{ github.event.inputs.pr_number || github.event.pull_request.number }}" >> $GITHUB_ENV
      - name: Check PR details
        uses: actions/github-script@v6
        with:
          script: |
            const pr_number = process.env.PR_NUMBER;
            if (pr_number) {
              console.log(`PR number: ${pr_number}`);
            } else {
              console.log('This workflow is not triggered by a pull request event.');
            }

      - name: Check if PR merged
        if: github.event.pull_request.merged == true
        run: echo "The PR was merged"

      - name: Ensure PR is mergeable
        id: mergeable
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_details=$(gh pr view $PR_NUMBER --json mergeable --jq .mergeable)
          echo "Mergeable state: $pr_details"
          if [ "$pr_details" = "MERGEABLE" ]; then
            echo "Pull request is mergeable."
          elif [ "$pr_details" = "false" ]; then
            echo "Pull request is not mergeable."
            exit 1
          else
            echo "Mergeable state is unknown. Please check the PR status."
            exit 1
          fi

      - name: Ensure Required Approvals
        id: approvals
        uses: actions/github-script@v6
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const prNumber = process.env.PR_NUMBER;
            const { data: branchProtection } = await github.rest.repos.getBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: context.repo.default_branch
            });
            const requiredApprovals = branchProtection.required_pull_request_reviews?.required_approving_review_count || 0;
            console.log(`Repository requires ${requiredApprovals} approval(s) for pull requests.`);
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            const approvedReviews = reviews.filter(r => r.state === "APPROVED");
            console.log(`Found ${approvedReviews.length} approval(s).`);
            if (approvedReviews.length < requiredApprovals) {
              core.setFailed(`PR requires at least ${requiredApprovals} approval(s).`);
            }
            
      - name: Automerge Script
        if: success()  # Only run this step if all previous steps were successful
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.pr_number }}
            });
            // Check mergeable state in the PR data (mergeable is a boolean)
            if (pr.mergeable_state === "dirty") {
              console.log("Pull request has merge conflicts.");
              return;
            }
            if (pr.mergeable_state === "clean") {
              console.log("PR is clean and ready for merging.");
            } else {
              console.log("Mergeable state:", pr.mergeable_state);
            }
            // Proceed to merge if the PR is mergeable
            if (pr.mergeable) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ github.event.inputs.pr_number }},
                merge_method: "squash",
                commit_title: "Auto-merged by GitHub Actions"
              });
            } else {
              console.log("Pull request is not mergeable.");
            }
