name: Auto Merge
on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
  workflow_dispatch:  # This allows manual trigger via API or GitHub UI
    inputs:
      pr_number:
        description: 'Pull Request Number'
        required: true
        type: integer

jobs:
  automerge:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      actions: write  # Added actions: write to ensure proper permissions

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check PR details
        uses: actions/github-script@v6
        with:
          script: |
            const pr_number = ${{ github.event.inputs.pr_number || github.event.pull_request.number }};
            if (pr_number) {
              console.log(`PR number: ${pr_number}`);
            } else {
              console.log('This workflow is not triggered by a pull request event.');
            }
      - name: Check if PR merged
        if: github.event.pull_request.merged == true
        run: |
          echo "The PR was merged"
      - name: Ensure PR is mergeable
        id: mergeable
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Default token provided by GitHub Actions
        run: |
          pr_details=$(gh pr view ${{ github.event.inputs.pr_number }} --json mergeable --jq .)
          echo "PR Details: $pr_details"
          # Fetch only the mergeable field from the PR details
          mergeable=$(echo "$pr_details" | jq -r .mergeable)
          echo "Mergeable state: $mergeable"
          # Handle the mergeable value
          if [ "$mergeable" = "MERGEABLE" ]; then
            echo "Pull request is mergeable."
          elif [ "$mergeable" = "false" ]; then
            echo "Pull request is not mergeable."
            exit 1
          elif [ "$mergeable" = "null" ]; then
            echo "Mergeable state is unknown. Please check the PR status."
            exit 1
          else
            echo "Unexpected mergeable state: $mergeable"
            exit 1
          fi
      - name: Check if Build Workflow is Successful
        id: check_build
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the list of workflows to find the ID for 'build.yml'
            const { data: workflows } = await github.rest.actions.listWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
      
            // Find the workflow ID based on the workflow name
            const buildWorkflow = workflows.find(workflow => workflow.name === 'Build');  // Adjust name if different
            if (!buildWorkflow) {
              console.log('Build workflow not found.');
              core.setFailed('Build workflow not found.');
              return;
            }
      
            const workflowId = buildWorkflow.id;
      
            console.log(`Using Build workflow ID: ${workflowId}`);
      
            // Get the list of workflow runs for the 'Build' workflow
            const { data: workflowRuns } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowId,  // Use the correct workflow ID
              branch: context.ref.replace('refs/heads/', ''),
              status: 'completed',
              per_page: 5
            });
      
            if (workflowRuns.length === 0) {
              console.log('No completed Build workflow runs found.');
              core.setFailed('Build workflow has not been completed.');
              return;
            }
      
            // Get the latest Build workflow run
            const latestBuildRun = workflowRuns[0];
      
            console.log(`Checking Build workflow run: ${latestBuildRun.id}`);
      
            // Check if the build workflow run has succeeded
            if (latestBuildRun.conclusion !== 'success') {
              console.log(`Build workflow run failed with conclusion: ${latestBuildRun.conclusion}`);
              core.setFailed(`The Build workflow failed. Conclusion: ${latestBuildRun.conclusion}`);
              return;
            }
      
            console.log('Build workflow has passed successfully.');
      - name: Ensure Required Approvals
        id: approvals
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.pr_number }}
            });
            // Filter reviews for "APPROVED" state
            const approvedReviews = reviews.filter(r => r.state === "APPROVED");
            const requiredApprovals = 1; // Adjust based on repository rules
            console.log(`Found ${approvedReviews.length} approvals.`);
            if (approvedReviews.length < requiredApprovals) {
              core.setFailed(`PR requires at least ${requiredApprovals} approval(s).`);
            }
            
      - name: Automerge Script
        if: success()  # Only run this step if all previous steps were successful
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.pr_number }}
            });
            // Check mergeable state in the PR data (mergeable is a boolean)
            if (pr.mergeable_state === "dirty") {
              console.log("Pull request has merge conflicts.");
              return;
            }
            if (pr.mergeable_state === "clean") {
              console.log("PR is clean and ready for merging.");
            } else {
              console.log("Mergeable state:", pr.mergeable_state);
            }
            // Proceed to merge if the PR is mergeable
            if (pr.mergeable) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ github.event.inputs.pr_number }},
                merge_method: "squash",
                commit_title: "Auto-merged by GitHub Actions"
              });
            } else {
              console.log("Pull request is not mergeable.");
            }
