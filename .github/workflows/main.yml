name: Auto Merge

on:
  pull_request_target:
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
  pull_request_review:
    types:
      - submitted
  check_suite:
    types:
      - completed
  status: {}

jobs:
  automerge:
    runs-on: ubuntu-latest
    if: ${{ always() }}  # Ensure this job runs after any change in PR state

    permissions:
      contents: read
      pull-requests: write
      actions: write
      checks: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ensure PR is mergeable
        id: mergeable
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          pr_details=$(gh pr view ${{ github.event.pull_request.number }} --json mergeable --jq .)
          echo "PR Details: $pr_details"

          # Fetch the mergeable field
          mergeable=$(echo "$pr_details" | jq -r .mergeable)

          echo "Mergeable state: $mergeable"

          if [ "$mergeable" = "MERGEABLE" ]; then
            echo "Pull request is mergeable."
          elif [ "$mergeable" = "false" ]; then
            echo "Pull request is not mergeable."
            exit 1
          elif [ "$mergeable" = "null" ]; then
            echo "Mergeable state is unknown. Please check the PR status."
            exit 1
          else
            echo "Unexpected mergeable state: $mergeable"
            exit 1
          fi

      - name: Ensure Required Approvals
        id: approvals
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            // Fetch the reviews of the pull request
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            // Filter reviews that have been "APPROVED"
            const approvedReviews = reviews.filter(review => review.state === "APPROVED");
            const requiredApprovals = 1;  // Adjust based on your repo rules

            console.log(`Found ${approvedReviews.length} approvals.`);

            // If the number of approved reviews is less than required, fail the job
            if (approvedReviews.length < requiredApprovals) {
              core.setFailed(`PR requires at least ${requiredApprovals} approval(s).`);
            } else {
              console.log(`Required approval(s) granted.`);
            }

      - name: Automerge Script
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            if (pr.mergeable_state === "dirty") {
              console.log("Pull request has merge conflicts.");
              return;
            }

            if (pr.mergeable_state === "clean") {
              console.log("PR is clean and ready for merging.");
            } else {
              console.log("Mergeable state:", pr.mergeable_state);
            }

            if (pr.mergeable) {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                merge_method: "squash",
                commit_title: "Auto-merged by GitHub Actions"
              });
            } else {
              console.log("Pull request is not mergeable.");
            }
