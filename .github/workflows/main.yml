name: Automerge
on:
  workflow_run:
    workflows: 
      - "Build"  # Name of the workflow that should trigger this one
    types:
      - completed  # Trigger the workflow when the 'Build' workflow completes

  check_suite:
    types:
      - completed  # Trigger the workflow when the check suite finishes
    status: success  # The workflow will trigger only when the check suite is successful

jobs:
  automerge:
      runs-on: ubuntu-latest
      permissions:
        contents: read       # Read repository content
        pull-requests: write # Write access to PRs (to merge them)
        actions: write       # Allow executing actions
  
      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Get PR number
          uses: actions/github-script@v6
          with:
            script: |
              const prNumber = context.payload.pull_request ? context.payload.pull_request.number : null;
              if (prNumber) {
                console.log(`PR Number: ${prNumber}`);
              } else {
                console.log('No PR number available in this context.');
              }
            
        - name: Ensure Required Approvals
          id: approvals
          uses: actions/github-script@v6
          with:
            github-token: ${{ github.token }}
            script: |
              const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
  
              // Debugging: log all review states
              console.log(`Reviews submitted: ${reviews.map(review => review.state).join(", ")}`);
              
              // Filter reviews that have been "APPROVED"
              const approvedReviews = reviews.filter(review => review.state === "APPROVED");
              const requiredApprovals = 1;  // Set this according to your repo's approval rules
  
              console.log(`Found ${approvedReviews.length} approvals.`);
  
              if (approvedReviews.length < requiredApprovals) {
                core.setFailed(`PR requires at least ${requiredApprovals} approval(s).`);
              } else {
                console.log(`Required approval(s) granted.`);
              }
              
        - name: Ensure PR is mergeable
          id: mergeable
          env:
            GH_TOKEN: ${{ github.token }}  # Default GitHub token provided by GitHub Actions
          run: |
            pr_details=$(gh pr view ${{ github.event.pull_request.number }} --json mergeable --jq .)
            echo "PR Details: $pr_details"
  
            # Fetch the mergeable field
            mergeable=$(echo "$pr_details" | jq -r .mergeable)
  
            echo "Mergeable state: $mergeable"
  
            if [ "$mergeable" = "MERGEABLE" ]; then
              echo "Pull request is mergeable."
            elif [ "$mergeable" = "false" ]; then
              echo "Pull request is not mergeable."
              exit 1
            elif [ "$mergeable" = "null" ]; then
              echo "Mergeable state is unknown. Please check the PR status."
              exit 1
            else
              echo "Unexpected mergeable state: $mergeable"
              exit 1
            fi
  
        - name: Automerge Script
          uses: actions/github-script@v6
          with:
            github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
            script: |
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number
              });
  
              if (pr.mergeable_state === "dirty") {
                console.log("Pull request has merge conflicts.");
                return;
              }
  
              if (pr.mergeable_state === "clean") {
                console.log("PR is clean and ready for merging.");
              } else {
                console.log("Mergeable state:", pr.mergeable_state);
              }
  
              if (pr.mergeable) {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  merge_method: "squash",
                  commit_title: "Auto-merged by GitHub Actions"
                });
              } else {
                console.log("Pull request is not mergeable.");
              }
          
    
